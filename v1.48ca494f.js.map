{"mappings":"yiBAAAA,EAAAC,EAAA,S,8BCGA,MAAMC,EAAQC,OAAOC,WAAa,IAC5BC,EAASF,OAAOG,YAAc,IAE9BC,EAAS,IAAI,EAAAC,EAAAC,QAAOC,SAASC,cAAc,UAAWT,EAAOG,GAC7DO,EAAMF,SAASC,cAAc,OAEnCD,SAASG,KAAKC,OAAOP,EAAOQ,QAE5B,MAAMC,EAAY,IDGH,MASFC,YACT,OAAOC,KAAKC,OAAOC,cACrB,CAEAC,YACmBN,EACAO,EACAC,EACAC,EACAC,EACAC,EAAgB,IAChBC,EAAQ,EACRC,EAAkB,QAClBC,EAAY,S,YARZd,E,mBACAO,E,WACAC,E,YACAC,E,YACAC,E,mBACAC,E,WACAC,E,qBACAC,E,eACAC,E,KArBFV,OAAS,IAAI,EAAAW,EAAAC,iBAAgB,G,KAE7BC,OAAQ,EAAAC,EAAAC,eAAchB,KAAKK,MAAOL,KAAKM,QAqBtDN,KAAKiB,OACP,CAEOC,WACLlB,KAAKC,OAAOkB,KAAKnB,KAAKC,OAAOmB,MAAQ,EACvC,CAEQH,QACNjB,KAAKH,OAAOwB,KAAKrB,KAAKU,iBAGtBV,KAAKD,MACFuB,MACC,EAAAC,EAAAC,SAAQC,GAASA,EAAOzB,KAAKQ,eAAkB,KAC/C,EAAAkB,EAAAC,YAAU,IACD3B,KAAKH,OAAO+B,eAErB,EAAA9C,EAAA+C,MAAKC,IACH9B,KAAKI,cAAc2B,IAAMD,CAAA,KAG5BE,WAAU,KACThC,KAAKiC,aAAc,EAAAlB,EAAAmB,YAAWlC,KAAKc,MAAOd,KAAKO,QAC/C,MAAM4B,GAAa,EAAApB,EAAAqB,gBAAepC,KAAKiC,YAAYI,MAAOrC,KAAKiC,YAAYK,KAE3EtC,KAAKuC,UAAW,EAAAxB,EAAAyB,kBACdxC,KAAKiC,YAAYI,MACjBrC,KAAKiC,YAAYK,IACjBH,EACAM,SAAS,GAAGN,EAAa,EAAK,IAC9BO,KAAKC,GAAE,IAKb3C,KAAKD,MACFuB,MACC,EAAAC,EAAAC,SAAQC,GAASA,EAAOzB,KAAKQ,eAAkB,KAC/C,EAAAoC,EAAAC,MAAKpB,GAASA,EAAOzB,KAAKQ,iBAC1B,EAAAoC,EAAAC,MAAKC,IACH,MAAMC,EAAwB,CAC5BC,EAAGhD,KAAKiC,YAAYK,IAAIU,EAAIhD,KAAKiC,YAAYI,MAAMW,EACnDC,EAAGjD,KAAKiC,YAAYK,IAAIW,EAAIjD,KAAKiC,YAAYI,MAAMY,GAE/CC,GAAkB,EAAAnC,EAAAoC,eAAcJ,GAEtC,MAAO,CACLK,MAAM,EAAArC,EAAAsC,wBAAuBH,EAAkBR,KAAKC,GAAK,EAAGG,EAAQ9C,KAAKS,OACzE6C,OAAO,EAAAvC,EAAAsC,wBAAuBH,EAAkBR,KAAKC,GAAK,EAAGG,EAAQ9C,KAAKS,OAC5E,KAGF,EAAAmC,EAAAC,MAAI,EAACO,KAAEA,EAAIE,MAAEA,MAAa,CACxBF,KAAMpD,KAAKuC,SAASM,KAAKU,IAAU,EAAAxC,EAAAyC,aAAYD,EAAOH,KACtDE,MAAOtD,KAAKuC,SAASkB,UAAUZ,KAAKU,IAAU,EAAAxC,EAAAyC,aAAYD,EAAOD,UAGnE,EAAA5B,EAAAC,YAAW+B,IACT,EAAAC,EAAAC,UAAS,CACP5D,KAAKH,OAAOgE,UAAU7D,KAAKI,cAAe,CAAE4C,EAAG,EAAGC,EAAG,IACrDjD,KAAKH,OAAOiE,WAAWJ,EAAQ1D,KAAKW,UAAWX,KAAKU,sBAIzDsB,WACL,GC5FgC3C,EAAQK,EAAKV,EAAOG,EAAQ,CAAE6D,EAAG,IAAKC,EAAG,OAE1E,SAASc,IACRjE,EAAUoB,WACV8C,sBAAsBD,EACxB,CAHC","sources":["src/animation.v1.ts","src/index.v1.ts"],"sourcesContent":["import { BehaviorSubject, filter, forkJoin, map, switchMap, tap } from 'rxjs';\n\nimport { Line, Point } from './types';\nimport { Canvas } from './canvas';\nimport {\n  applyOffset,\n  calcLineAngle,\n  calcLineLength,\n  calcPointInPolarSystem,\n  createLine,\n  generateSides,\n  generateTornLine\n} from './math';\n\nexport default class Animation {\n  private readonly _tick$ = new BehaviorSubject(0);\n\n  private readonly sides = generateSides(this.width, this.height);\n\n  private currentLine!: Line;\n\n  private tornLine!: Point[];\n\n  public get tick$() {\n    return this._tick$.asObservable();\n  }\n\n  constructor(\n    private readonly canvas: Canvas,\n    private readonly prevCanvasImg: HTMLImageElement,\n    private readonly width: number,\n    private readonly height: number,\n    private readonly offset: Point,\n    private readonly lineLifeTicks = 100,\n    private readonly speed = 7,\n    private readonly backgroundColor = 'black',\n    private readonly lineColor = 'white'\n  ) {\n    this.setup();\n  }\n\n  public dispatch() {\n    this._tick$.next(this._tick$.value + 1);\n  }\n\n  private setup() {\n    this.canvas.fill(this.backgroundColor);\n\n    // Generate torn line every ${this.speed} ticks.\n    this.tick$\n      .pipe(\n        filter((time) => time % this.lineLifeTicks === 0),\n        switchMap(() => {\n          return this.canvas.toDataUrl();\n        }),\n        tap((canvasImg) => {\n          this.prevCanvasImg.src = canvasImg;\n        })\n      )\n      .subscribe(() => {\n        this.currentLine = createLine(this.sides, this.offset);\n        const lineLength = calcLineLength(this.currentLine.start, this.currentLine.end);\n\n        this.tornLine = generateTornLine(\n          this.currentLine.start,\n          this.currentLine.end,\n          lineLength,\n          parseInt(`${lineLength / 5}`, 10),\n          Math.PI\n        );\n      });\n\n    // Draw and animate torn line on the canvas.\n    this.tick$\n      .pipe(\n        filter((time) => time % this.lineLifeTicks !== 0),\n        map((time) => time % this.lineLifeTicks),\n        map((timer) => {\n          const endPointWithoutOffset = {\n            x: this.currentLine.end.x - this.currentLine.start.x,\n            y: this.currentLine.end.y - this.currentLine.start.y\n          };\n          const lineRadianAngle = calcLineAngle(endPointWithoutOffset);\n\n          return {\n            left: calcPointInPolarSystem(lineRadianAngle + Math.PI / 2, timer / this.speed),\n            right: calcPointInPolarSystem(lineRadianAngle - Math.PI / 2, timer / this.speed)\n          };\n        }),\n\n        map(({ left, right }) => ({\n          left: this.tornLine.map((point) => applyOffset(point, left)),\n          right: this.tornLine.reverse().map((point) => applyOffset(point, right))\n        })),\n\n        switchMap((figure) =>\n          forkJoin([\n            this.canvas.drawImage(this.prevCanvasImg, { x: 0, y: 0 }),\n            this.canvas.drawFigure(figure, this.lineColor, this.backgroundColor)\n          ])\n        )\n      )\n      .subscribe();\n  }\n}\n","import AnimationV2 from './animation.v1';\nimport { Canvas } from './canvas';\n\nconst WIDTH = window.innerWidth + 600;\nconst HEIGHT = window.innerHeight + 600;\n\nconst canvas = new Canvas(document.createElement('canvas'), WIDTH, HEIGHT);\nconst img = document.createElement('img');\n\ndocument.body.append(canvas.canvas);\n\nconst animation = new AnimationV2(canvas, img, WIDTH, HEIGHT, { x: 600, y: 600 });\n\n(function render() {\n  animation.dispatch();\n  requestAnimationFrame(render);\n})();\n"],"names":["$5mF43","parcelRequire","$d180e48e458a4be4$var$WIDTH","window","innerWidth","$d180e48e458a4be4$var$HEIGHT","innerHeight","$d180e48e458a4be4$var$canvas","$ltQS0","Canvas","document","createElement","$d180e48e458a4be4$var$img","body","append","canvas","$d180e48e458a4be4$var$animation","tick$","this","_tick$","asObservable","constructor","prevCanvasImg","width","height","offset","lineLifeTicks","speed","backgroundColor","lineColor","$axHCK","BehaviorSubject","sides","$aisEY","generateSides","setup","dispatch","next","value","fill","pipe","$d6DLj","filter","time","$466t7","switchMap","toDataUrl","tap","canvasImg","src","subscribe","currentLine","createLine","lineLength","calcLineLength","start","end","tornLine","generateTornLine","parseInt","Math","PI","$d4PzE","map","timer","endPointWithoutOffset","x","y","lineRadianAngle","calcLineAngle","left","calcPointInPolarSystem","right","point","applyOffset","reverse","figure","$c6GPX","forkJoin","drawImage","drawFigure","render","requestAnimationFrame"],"version":3,"file":"v1.48ca494f.js.map"}