{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,S,8ECAAC,EAAAD,EAAA,S,0BDGA,MAAME,EAAQC,OAAOC,WAAa,IAC5BC,EAASF,OAAOG,YAAc,IAE9BC,EAAY,ICUH,MAaFC,YACT,OAAOC,KAAKC,OAAOC,eAAeC,MAAK,EAAAC,EAAAC,SAAQC,GAASA,EAAO,MACjE,CAEAC,YACmBC,EACAC,EACAC,EACAC,EACAC,G,mBAJAJ,E,cACAC,E,WACAC,E,YACAC,E,YACAC,E,KArBXC,WAAab,KAAKQ,cAAcM,aAAad,KAAKU,MAAOV,KAAKW,Q,KAErDI,YAAcf,KAAKS,SAASO,cAAc,O,KAE1CC,aAAejB,KAAKS,SAASO,cAAc,O,KAE3Cf,OAAS,IAAI,EAAAiB,EAAAC,iBAAgB,G,KAE7BC,OAAQ,EAAAC,EAAAC,eAActB,KAAKU,MAAOV,KAAKW,QAetD,MAAMY,EAAOd,EAASe,cAAc,SAEpCD,GAAME,YAAYzB,KAAKa,WAAWa,QAElC1B,KAAK2B,OACP,CAEOC,WACL5B,KAAKC,OAAO4B,KAAK7B,KAAKC,OAAO6B,MAAQ,EACvC,CAEQH,QACN3B,KAAKa,WAAWkB,KAAK,SAGrB/B,KAAKD,MACFI,MACC,EAAAC,EAAAC,SAAQ2B,GAASA,EAAO,KAAQ,KAChC,EAAAC,EAAAC,MAAI,KACFlC,KAAKmC,aAAc,EAAAd,EAAAe,YAAWpC,KAAKoB,MAAOpB,KAAKY,QAC/C,MAAMyB,GAAa,EAAAhB,EAAAiB,gBAAetC,KAAKmC,YAAYI,MAAOvC,KAAKmC,YAAYK,KAErEC,GAAO,EAAApB,EAAAqB,kBACX1C,KAAKmC,YAAYI,MACjBvC,KAAKmC,YAAYK,IACjBH,EACAM,SAAS,GAAGN,EAAa,EAAK,IAC9BO,KAAKC,IAGP,OAAO,EAAAxB,EAAAyB,qBAAoBL,EAAMzC,KAAKU,MAAOV,KAAKW,OAAQX,KAAKoB,MAAK,KAEtE,EAAA2B,EAAAC,YAAWC,IACT,EAAAC,EAAAC,UAAS,CAACnD,KAAKoD,qBAAqBH,EAAOI,MAAOrD,KAAKoD,qBAAqBH,EAAOK,YAErF,EAAA9D,EAAA+D,MAAI,EAAEF,EAAMC,MACVtD,KAAKe,YAAYyC,IAAMH,EACvBrD,KAAKiB,aAAauC,IAAMF,CAAA,KAG3BG,YAGHzD,KAAKD,MACFI,MACC,EAAAC,EAAAC,SAAQ2B,GAASA,EAAO,KAAQ,KAChC,EAAAC,EAAAC,MAAKF,GAASA,EAAO,OACrB,EAAAC,EAAAC,MAAKwB,IACH,MAAMC,EAAwB,CAC5BC,EAAG5D,KAAKmC,YAAYK,IAAIoB,EAAI5D,KAAKmC,YAAYI,MAAMqB,EACnDC,EAAG7D,KAAKmC,YAAYK,IAAIqB,EAAI7D,KAAKmC,YAAYI,MAAMsB,GAE/CC,GAAkB,EAAAzC,EAAA0C,eAAcJ,GAEtC,MAAO,CACLN,MAAM,EAAAhC,EAAA2C,wBAAuBF,EAAkBlB,KAAKC,GAAK,EAAGa,EAAQ,IACpEJ,OAAO,EAAAjC,EAAA2C,wBAAuBF,EAAkBlB,KAAKC,GAAK,EAAGa,EAAQ,IACvE,KAEF,EAAAX,EAAAC,YAAU,EAACK,KAAEA,EAAIC,MAAEA,MACjB,EAAAJ,EAAAC,UAAS,CACPnD,KAAKa,WAAWoD,QAChBjE,KAAKa,WAAWqD,SAChB,EAAAC,EAAAC,aAAYC,QAAQC,UAAUC,MAAK,IAAMvE,KAAKa,WAAWkB,KAAK,YAC9D/B,KAAKa,WAAW2D,UAAUxE,KAAKe,YAAasC,GAC5CrD,KAAKa,WAAW2D,UAAUxE,KAAKiB,aAAcqC,QAIlDG,WACL,CAEQL,qBAAqBqB,GAC3B,OAAO,EAAAC,EAAAC,IAAG3E,KAAKQ,cAAcM,aAAad,KAAKU,MAAOV,KAAKW,SAASR,MAClE,EAAA4C,EAAAC,YAAWtB,IACT,EAAAwB,EAAAC,UAAS,CACPzB,EAAOkD,SAASH,EAAM,QAAS,SAC/B/C,EAAO8C,UAAUxE,KAAKa,WAAWa,OAAQ,CAAEkC,EAAG,EAAGC,EAAG,MACnD1D,MAAK,EAAA4C,EAAAC,YAAU,IAAMtB,EAAOmD,iBAGrC,GDnHgC,IAAI,EAAAvF,EAAAwF,eAAcrE,UAAWA,SAAUhB,EAAOG,EAAQ,CAAEgE,EAAG,IAAKC,EAAG,OAEpG,SAASkB,IACRjF,EAAU8B,WACVoD,sBAAsBD,EACxB,CAHC","sources":["src/index.ts","src/animation.v2.ts"],"sourcesContent":["import { CanvasFactory } from './canvas';\nimport AnimationV2 from './animation.v2';\n\nconst WIDTH = window.innerWidth + 600;\nconst HEIGHT = window.innerHeight + 600;\n\nconst animation = new AnimationV2(new CanvasFactory(document), document, WIDTH, HEIGHT, { x: 600, y: 600 });\n\n(function render() {\n  animation.dispatch();\n  requestAnimationFrame(render);\n})();\n","import { BehaviorSubject, filter, forkJoin, map, of, switchMap, tap } from 'rxjs';\n// @ts-ignore\nimport { fromPromise } from 'rxjs/src/internal/observable/innerFrom';\n\nimport {\n  createLine,\n  calcLineLength,\n  generateTornLine,\n  generateSides,\n  generateFigureShape,\n  calcLineAngle,\n  calcPointInPolarSystem\n} from './math';\nimport CanvasFactory from './canvas/canvas.factory';\nimport { Line, Point } from './types';\n\nexport default class AnimationV2 {\n  private realCanvas = this.canvasFactory.createCanvas(this.width, this.height);\n\n  private readonly leftSideImg = this.document.createElement('img');\n\n  private readonly rightSideImg = this.document.createElement('img');\n\n  private readonly _tick$ = new BehaviorSubject(0);\n\n  private readonly sides = generateSides(this.width, this.height);\n\n  private currentLine!: Line;\n\n  public get tick$() {\n    return this._tick$.asObservable().pipe(filter((tick) => tick < 3000));\n  }\n\n  constructor(\n    private readonly canvasFactory: CanvasFactory,\n    private readonly document: Document,\n    private readonly width: number,\n    private readonly height: number,\n    private readonly offset: Point\n  ) {\n    const root = document.querySelector('.root');\n\n    root?.appendChild(this.realCanvas.canvas);\n\n    this.setup();\n  }\n\n  public dispatch() {\n    this._tick$.next(this._tick$.value + 1);\n  }\n\n  private setup() {\n    this.realCanvas.fill('black');\n\n    // Generate and save left and right figures every 300ms.\n    this.tick$\n      .pipe(\n        filter((time) => time % 300 === 0),\n        map(() => {\n          this.currentLine = createLine(this.sides, this.offset);\n          const lineLength = calcLineLength(this.currentLine.start, this.currentLine.end);\n\n          const line = generateTornLine(\n            this.currentLine.start,\n            this.currentLine.end,\n            lineLength,\n            parseInt(`${lineLength / 7}`, 10),\n            Math.PI\n          );\n\n          return generateFigureShape(line, this.width, this.height, this.sides);\n        }),\n        switchMap((figure) =>\n          forkJoin([this.drawPathOnTempCanvas(figure.left), this.drawPathOnTempCanvas(figure.right)])\n        ),\n        tap(([left, right]) => {\n          this.leftSideImg.src = left;\n          this.rightSideImg.src = right;\n        })\n      )\n      .subscribe();\n\n    // Draw and animate parts on real canvas.\n    this.tick$\n      .pipe(\n        filter((time) => time % 300 !== 0),\n        map((time) => time % 300),\n        map((timer) => {\n          const endPointWithoutOffset = {\n            x: this.currentLine.end.x - this.currentLine.start.x,\n            y: this.currentLine.end.y - this.currentLine.start.y\n          };\n          const lineRadianAngle = calcLineAngle(endPointWithoutOffset);\n\n          return {\n            left: calcPointInPolarSystem(lineRadianAngle - Math.PI / 2, timer / 25),\n            right: calcPointInPolarSystem(lineRadianAngle + Math.PI / 2, timer / 25)\n          };\n        }),\n        switchMap(({ left, right }) =>\n          forkJoin([\n            this.realCanvas.reset(),\n            this.realCanvas.clear(),\n            fromPromise(Promise.resolve().then(() => this.realCanvas.fill('black'))),\n            this.realCanvas.drawImage(this.leftSideImg, left),\n            this.realCanvas.drawImage(this.rightSideImg, right)\n          ])\n        )\n      )\n      .subscribe();\n  }\n\n  private drawPathOnTempCanvas(path: Point[]) {\n    return of(this.canvasFactory.createCanvas(this.width, this.height)).pipe(\n      switchMap((canvas) =>\n        forkJoin([\n          canvas.drawPath(path, 'white', 'black'),\n          canvas.drawImage(this.realCanvas.canvas, { x: 0, y: 0 })\n        ]).pipe(switchMap(() => canvas.toDataUrl()))\n      )\n    );\n  }\n}\n"],"names":["$ltQS0","parcelRequire","$5mF43","$b4e14b6b8da86996$var$WIDTH","window","innerWidth","$b4e14b6b8da86996$var$HEIGHT","innerHeight","$b4e14b6b8da86996$var$animation","tick$","this","_tick$","asObservable","pipe","$d6DLj","filter","tick","constructor","canvasFactory","document","width","height","offset","realCanvas","createCanvas","leftSideImg","createElement","rightSideImg","$axHCK","BehaviorSubject","sides","$aisEY","generateSides","root","querySelector","appendChild","canvas","setup","dispatch","next","value","fill","time","$d4PzE","map","currentLine","createLine","lineLength","calcLineLength","start","end","line","generateTornLine","parseInt","Math","PI","generateFigureShape","$466t7","switchMap","figure","$c6GPX","forkJoin","drawPathOnTempCanvas","left","right","tap","src","subscribe","timer","endPointWithoutOffset","x","y","lineRadianAngle","calcLineAngle","calcPointInPolarSystem","reset","clear","$8208i","fromPromise","Promise","resolve","then","drawImage","path","$2b25J","of","drawPath","toDataUrl","CanvasFactory","render","requestAnimationFrame"],"version":3,"file":"index.fdf6e6a0.js.map"}